// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Business.proto

#ifndef PROTOBUF_Business_2eproto__INCLUDED
#define PROTOBUF_Business_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ExcelConf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Business_2eproto();
void protobuf_AssignDesc_Business_2eproto();
void protobuf_ShutdownFile_Business_2eproto();

class Business;
class Business_t_Business;

// ===================================================================

class Business_t_Business : public ::google::protobuf::Message {
 public:
  Business_t_Business();
  virtual ~Business_t_Business();

  Business_t_Business(const Business_t_Business& from);

  inline Business_t_Business& operator=(const Business_t_Business& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Business_t_Business& default_instance();

  void Swap(Business_t_Business* other);

  // implements Message ----------------------------------------------

  Business_t_Business* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Business_t_Business& from);
  void MergeFrom(const Business_t_Business& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 tbxid = 1;
  inline bool has_tbxid() const;
  inline void clear_tbxid();
  static const int kTbxidFieldNumber = 1;
  inline ::google::protobuf::uint32 tbxid() const;
  inline void set_tbxid(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string price = 4;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 4;
  inline const ::std::string& price() const;
  inline void set_price(const ::std::string& value);
  inline void set_price(const char* value);
  inline void set_price(const char* value, size_t size);
  inline ::std::string* mutable_price();
  inline ::std::string* release_price();
  inline void set_allocated_price(::std::string* price);

  // required string disprice = 5;
  inline bool has_disprice() const;
  inline void clear_disprice();
  static const int kDispriceFieldNumber = 5;
  inline const ::std::string& disprice() const;
  inline void set_disprice(const ::std::string& value);
  inline void set_disprice(const char* value);
  inline void set_disprice(const char* value, size_t size);
  inline ::std::string* mutable_disprice();
  inline ::std::string* release_disprice();
  inline void set_allocated_disprice(::std::string* disprice);

  // required string person = 6;
  inline bool has_person() const;
  inline void clear_person();
  static const int kPersonFieldNumber = 6;
  inline const ::std::string& person() const;
  inline void set_person(const ::std::string& value);
  inline void set_person(const char* value);
  inline void set_person(const char* value, size_t size);
  inline ::std::string* mutable_person();
  inline ::std::string* release_person();
  inline void set_allocated_person(::std::string* person);

  // @@protoc_insertion_point(class_scope:ExcelConf.Business.t_Business)
 private:
  inline void set_has_tbxid();
  inline void clear_has_tbxid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_disprice();
  inline void clear_has_disprice();
  inline void set_has_person();
  inline void clear_has_person();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tbxid_;
  ::google::protobuf::uint32 type_;
  ::std::string* price_;
  ::std::string* disprice_;
  ::std::string* person_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Business_2eproto();
  friend void protobuf_AssignDesc_Business_2eproto();
  friend void protobuf_ShutdownFile_Business_2eproto();

  void InitAsDefaultInstance();
  static Business_t_Business* default_instance_;
};
// -------------------------------------------------------------------

class Business : public ::google::protobuf::Message {
 public:
  Business();
  virtual ~Business();

  Business(const Business& from);

  inline Business& operator=(const Business& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Business& default_instance();

  void Swap(Business* other);

  // implements Message ----------------------------------------------

  Business* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Business& from);
  void MergeFrom(const Business& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Business_t_Business t_Business;

  // accessors -------------------------------------------------------

  // repeated .ExcelConf.Business.t_Business datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::ExcelConf::Business_t_Business& datas(int index) const;
  inline ::ExcelConf::Business_t_Business* mutable_datas(int index);
  inline ::ExcelConf::Business_t_Business* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::ExcelConf::Business_t_Business >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::ExcelConf::Business_t_Business >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:ExcelConf.Business)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ExcelConf::Business_t_Business > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Business_2eproto();
  friend void protobuf_AssignDesc_Business_2eproto();
  friend void protobuf_ShutdownFile_Business_2eproto();

  void InitAsDefaultInstance();
  static Business* default_instance_;
};
// ===================================================================


// ===================================================================

// Business_t_Business

// required uint32 tbxid = 1;
inline bool Business_t_Business::has_tbxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Business_t_Business::set_has_tbxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Business_t_Business::clear_has_tbxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Business_t_Business::clear_tbxid() {
  tbxid_ = 0u;
  clear_has_tbxid();
}
inline ::google::protobuf::uint32 Business_t_Business::tbxid() const {
  return tbxid_;
}
inline void Business_t_Business::set_tbxid(::google::protobuf::uint32 value) {
  set_has_tbxid();
  tbxid_ = value;
}

// required uint32 type = 2;
inline bool Business_t_Business::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Business_t_Business::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Business_t_Business::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Business_t_Business::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Business_t_Business::type() const {
  return type_;
}
inline void Business_t_Business::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 id = 3;
inline bool Business_t_Business::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Business_t_Business::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Business_t_Business::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Business_t_Business::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Business_t_Business::id() const {
  return id_;
}
inline void Business_t_Business::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string price = 4;
inline bool Business_t_Business::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Business_t_Business::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Business_t_Business::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Business_t_Business::clear_price() {
  if (price_ != &::google::protobuf::internal::kEmptyString) {
    price_->clear();
  }
  clear_has_price();
}
inline const ::std::string& Business_t_Business::price() const {
  return *price_;
}
inline void Business_t_Business::set_price(const ::std::string& value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(value);
}
inline void Business_t_Business::set_price(const char* value) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(value);
}
inline void Business_t_Business::set_price(const char* value, size_t size) {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  price_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Business_t_Business::mutable_price() {
  set_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    price_ = new ::std::string;
  }
  return price_;
}
inline ::std::string* Business_t_Business::release_price() {
  clear_has_price();
  if (price_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = price_;
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Business_t_Business::set_allocated_price(::std::string* price) {
  if (price_ != &::google::protobuf::internal::kEmptyString) {
    delete price_;
  }
  if (price) {
    set_has_price();
    price_ = price;
  } else {
    clear_has_price();
    price_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string disprice = 5;
inline bool Business_t_Business::has_disprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Business_t_Business::set_has_disprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Business_t_Business::clear_has_disprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Business_t_Business::clear_disprice() {
  if (disprice_ != &::google::protobuf::internal::kEmptyString) {
    disprice_->clear();
  }
  clear_has_disprice();
}
inline const ::std::string& Business_t_Business::disprice() const {
  return *disprice_;
}
inline void Business_t_Business::set_disprice(const ::std::string& value) {
  set_has_disprice();
  if (disprice_ == &::google::protobuf::internal::kEmptyString) {
    disprice_ = new ::std::string;
  }
  disprice_->assign(value);
}
inline void Business_t_Business::set_disprice(const char* value) {
  set_has_disprice();
  if (disprice_ == &::google::protobuf::internal::kEmptyString) {
    disprice_ = new ::std::string;
  }
  disprice_->assign(value);
}
inline void Business_t_Business::set_disprice(const char* value, size_t size) {
  set_has_disprice();
  if (disprice_ == &::google::protobuf::internal::kEmptyString) {
    disprice_ = new ::std::string;
  }
  disprice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Business_t_Business::mutable_disprice() {
  set_has_disprice();
  if (disprice_ == &::google::protobuf::internal::kEmptyString) {
    disprice_ = new ::std::string;
  }
  return disprice_;
}
inline ::std::string* Business_t_Business::release_disprice() {
  clear_has_disprice();
  if (disprice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = disprice_;
    disprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Business_t_Business::set_allocated_disprice(::std::string* disprice) {
  if (disprice_ != &::google::protobuf::internal::kEmptyString) {
    delete disprice_;
  }
  if (disprice) {
    set_has_disprice();
    disprice_ = disprice;
  } else {
    clear_has_disprice();
    disprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string person = 6;
inline bool Business_t_Business::has_person() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Business_t_Business::set_has_person() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Business_t_Business::clear_has_person() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Business_t_Business::clear_person() {
  if (person_ != &::google::protobuf::internal::kEmptyString) {
    person_->clear();
  }
  clear_has_person();
}
inline const ::std::string& Business_t_Business::person() const {
  return *person_;
}
inline void Business_t_Business::set_person(const ::std::string& value) {
  set_has_person();
  if (person_ == &::google::protobuf::internal::kEmptyString) {
    person_ = new ::std::string;
  }
  person_->assign(value);
}
inline void Business_t_Business::set_person(const char* value) {
  set_has_person();
  if (person_ == &::google::protobuf::internal::kEmptyString) {
    person_ = new ::std::string;
  }
  person_->assign(value);
}
inline void Business_t_Business::set_person(const char* value, size_t size) {
  set_has_person();
  if (person_ == &::google::protobuf::internal::kEmptyString) {
    person_ = new ::std::string;
  }
  person_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Business_t_Business::mutable_person() {
  set_has_person();
  if (person_ == &::google::protobuf::internal::kEmptyString) {
    person_ = new ::std::string;
  }
  return person_;
}
inline ::std::string* Business_t_Business::release_person() {
  clear_has_person();
  if (person_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = person_;
    person_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Business_t_Business::set_allocated_person(::std::string* person) {
  if (person_ != &::google::protobuf::internal::kEmptyString) {
    delete person_;
  }
  if (person) {
    set_has_person();
    person_ = person;
  } else {
    clear_has_person();
    person_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Business

// repeated .ExcelConf.Business.t_Business datas = 1;
inline int Business::datas_size() const {
  return datas_.size();
}
inline void Business::clear_datas() {
  datas_.Clear();
}
inline const ::ExcelConf::Business_t_Business& Business::datas(int index) const {
  return datas_.Get(index);
}
inline ::ExcelConf::Business_t_Business* Business::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::ExcelConf::Business_t_Business* Business::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExcelConf::Business_t_Business >&
Business::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::ExcelConf::Business_t_Business >*
Business::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExcelConf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Business_2eproto__INCLUDED
