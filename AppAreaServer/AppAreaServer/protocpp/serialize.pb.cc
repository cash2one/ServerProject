// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialize.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoMsgData {

namespace {

const ::google::protobuf::Descriptor* ReqTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialize_2eproto() {
  protobuf_AddDesc_serialize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialize.proto");
  GOOGLE_CHECK(file != NULL);
  ReqTest_descriptor_ = file->message_type(0);
  static const int ReqTest_offsets_[1] = {
  };
  ReqTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTest_descriptor_,
      ReqTest::default_instance_,
      ReqTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTest));
  AckTest_descriptor_ = file->message_type(1);
  static const int AckTest_offsets_[1] = {
  };
  AckTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTest_descriptor_,
      AckTest::default_instance_,
      AckTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTest_descriptor_, &ReqTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTest_descriptor_, &AckTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialize_2eproto() {
  delete ReqTest::default_instance_;
  delete ReqTest_reflection_;
  delete AckTest::default_instance_;
  delete AckTest_reflection_;
}

void protobuf_AddDesc_serialize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017serialize.proto\022\014ProtoMsgData\"\t\n\007ReqTe"
    "st\"\t\n\007AckTest", 53);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialize.proto", &protobuf_RegisterTypes);
  ReqTest::default_instance_ = new ReqTest();
  AckTest::default_instance_ = new AckTest();
  ReqTest::default_instance_->InitAsDefaultInstance();
  AckTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialize_2eproto {
  StaticDescriptorInitializer_serialize_2eproto() {
    protobuf_AddDesc_serialize_2eproto();
  }
} static_descriptor_initializer_serialize_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqTest::ReqTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTest::InitAsDefaultInstance() {
}

ReqTest::ReqTest(const ReqTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTest::~ReqTest() {
  SharedDtor();
}

void ReqTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTest_descriptor_;
}

const ReqTest& ReqTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

ReqTest* ReqTest::default_instance_ = NULL;

ReqTest* ReqTest::New() const {
  return new ReqTest;
}

void ReqTest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTest::MergeFrom(const ReqTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTest::CopyFrom(const ReqTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTest::IsInitialized() const {

  return true;
}

void ReqTest::Swap(ReqTest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTest_descriptor_;
  metadata.reflection = ReqTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckTest::AckTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTest::InitAsDefaultInstance() {
}

AckTest::AckTest(const AckTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTest::~AckTest() {
  SharedDtor();
}

void AckTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTest_descriptor_;
}

const AckTest& AckTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialize_2eproto();
  return *default_instance_;
}

AckTest* AckTest::default_instance_ = NULL;

AckTest* AckTest::New() const {
  return new AckTest;
}

void AckTest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTest::MergeFrom(const AckTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTest::CopyFrom(const AckTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTest::IsInitialized() const {

  return true;
}

void AckTest::Swap(AckTest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTest_descriptor_;
  metadata.reflection = AckTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsgData

// @@protoc_insertion_point(global_scope)
