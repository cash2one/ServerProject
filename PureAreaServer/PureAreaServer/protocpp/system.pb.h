// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef PROTOBUF_system_2eproto__INCLUDED
#define PROTOBUF_system_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoMsgData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_system_2eproto();
void protobuf_AssignDesc_system_2eproto();
void protobuf_ShutdownFile_system_2eproto();

class ReqServerInfo;
class ServerInfo;
class AckUpdateServerInfo;
class AckRespServerInfo;
class AckNotifyMe;
class ReqHeartBeat;
class AckHeartBeat;
class ReqVerifyServer;
class AckVerifyServer;

enum ServerType {
  ST_Client = 0,
  ST_Login = 1,
  ST_Super = 2,
  ST_Record = 3,
  ST_Scene = 4,
  ST_Gateway = 5
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = ST_Client;
const ServerType ServerType_MAX = ST_Gateway;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
enum ServerStatus {
  ST_Wait = 1,
  ST_Start = 2,
  ST_Close = 3
};
bool ServerStatus_IsValid(int value);
const ServerStatus ServerStatus_MIN = ST_Wait;
const ServerStatus ServerStatus_MAX = ST_Close;
const int ServerStatus_ARRAYSIZE = ServerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerStatus_descriptor();
inline const ::std::string& ServerStatus_Name(ServerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerStatus_descriptor(), value);
}
inline bool ServerStatus_Parse(
    const ::std::string& name, ServerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerStatus>(
    ServerStatus_descriptor(), name, value);
}
// ===================================================================

class ReqServerInfo : public ::google::protobuf::Message {
 public:
  ReqServerInfo();
  virtual ~ReqServerInfo();

  ReqServerInfo(const ReqServerInfo& from);

  inline ReqServerInfo& operator=(const ReqServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServerInfo& default_instance();

  void Swap(ReqServerInfo* other);

  // implements Message ----------------------------------------------

  ReqServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqServerInfo& from);
  void MergeFrom(const ReqServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoMsgData.ServerType servertype = 1;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 1;
  inline ::ProtoMsgData::ServerType servertype() const;
  inline void set_servertype(::ProtoMsgData::ServerType value);

  // @@protoc_insertion_point(class_scope:ProtoMsgData.ReqServerInfo)
 private:
  inline void set_has_servertype();
  inline void clear_has_servertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int servertype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static ReqServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoMsgData.ServerType servertype = 1;
  inline bool has_servertype() const;
  inline void clear_servertype();
  static const int kServertypeFieldNumber = 1;
  inline ::ProtoMsgData::ServerType servertype() const;
  inline void set_servertype(::ProtoMsgData::ServerType value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional .ProtoMsgData.ServerStatus status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::ProtoMsgData::ServerStatus status() const;
  inline void set_status(::ProtoMsgData::ServerStatus value);

  // @@protoc_insertion_point(class_scope:ProtoMsgData.ServerInfo)
 private:
  inline void set_has_servertype();
  inline void clear_has_servertype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int servertype_;
  ::google::protobuf::uint32 id_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateServerInfo : public ::google::protobuf::Message {
 public:
  AckUpdateServerInfo();
  virtual ~AckUpdateServerInfo();

  AckUpdateServerInfo(const AckUpdateServerInfo& from);

  inline AckUpdateServerInfo& operator=(const AckUpdateServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateServerInfo& default_instance();

  void Swap(AckUpdateServerInfo* other);

  // implements Message ----------------------------------------------

  AckUpdateServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateServerInfo& from);
  void MergeFrom(const AckUpdateServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoMsgData.ServerInfo serverinfo = 1;
  inline bool has_serverinfo() const;
  inline void clear_serverinfo();
  static const int kServerinfoFieldNumber = 1;
  inline const ::ProtoMsgData::ServerInfo& serverinfo() const;
  inline ::ProtoMsgData::ServerInfo* mutable_serverinfo();
  inline ::ProtoMsgData::ServerInfo* release_serverinfo();
  inline void set_allocated_serverinfo(::ProtoMsgData::ServerInfo* serverinfo);

  // @@protoc_insertion_point(class_scope:ProtoMsgData.AckUpdateServerInfo)
 private:
  inline void set_has_serverinfo();
  inline void clear_has_serverinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoMsgData::ServerInfo* serverinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckRespServerInfo : public ::google::protobuf::Message {
 public:
  AckRespServerInfo();
  virtual ~AckRespServerInfo();

  AckRespServerInfo(const AckRespServerInfo& from);

  inline AckRespServerInfo& operator=(const AckRespServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRespServerInfo& default_instance();

  void Swap(AckRespServerInfo* other);

  // implements Message ----------------------------------------------

  AckRespServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRespServerInfo& from);
  void MergeFrom(const AckRespServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMsgData.AckRespServerInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static AckRespServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckNotifyMe : public ::google::protobuf::Message {
 public:
  AckNotifyMe();
  virtual ~AckNotifyMe();

  AckNotifyMe(const AckNotifyMe& from);

  inline AckNotifyMe& operator=(const AckNotifyMe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckNotifyMe& default_instance();

  void Swap(AckNotifyMe* other);

  // implements Message ----------------------------------------------

  AckNotifyMe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckNotifyMe& from);
  void MergeFrom(const AckNotifyMe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoMsgData.ServerInfo serverinfo = 1;
  inline int serverinfo_size() const;
  inline void clear_serverinfo();
  static const int kServerinfoFieldNumber = 1;
  inline const ::ProtoMsgData::ServerInfo& serverinfo(int index) const;
  inline ::ProtoMsgData::ServerInfo* mutable_serverinfo(int index);
  inline ::ProtoMsgData::ServerInfo* add_serverinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoMsgData::ServerInfo >&
      serverinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoMsgData::ServerInfo >*
      mutable_serverinfo();

  // @@protoc_insertion_point(class_scope:ProtoMsgData.AckNotifyMe)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ProtoMsgData::ServerInfo > serverinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static AckNotifyMe* default_instance_;
};
// -------------------------------------------------------------------

class ReqHeartBeat : public ::google::protobuf::Message {
 public:
  ReqHeartBeat();
  virtual ~ReqHeartBeat();

  ReqHeartBeat(const ReqHeartBeat& from);

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHeartBeat& default_instance();

  void Swap(ReqHeartBeat* other);

  // implements Message ----------------------------------------------

  ReqHeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqHeartBeat& from);
  void MergeFrom(const ReqHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsgData.ReqHeartBeat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static ReqHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class AckHeartBeat : public ::google::protobuf::Message {
 public:
  AckHeartBeat();
  virtual ~AckHeartBeat();

  AckHeartBeat(const AckHeartBeat& from);

  inline AckHeartBeat& operator=(const AckHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHeartBeat& default_instance();

  void Swap(AckHeartBeat* other);

  // implements Message ----------------------------------------------

  AckHeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckHeartBeat& from);
  void MergeFrom(const AckHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMsgData.AckHeartBeat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static AckHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class ReqVerifyServer : public ::google::protobuf::Message {
 public:
  ReqVerifyServer();
  virtual ~ReqVerifyServer();

  ReqVerifyServer(const ReqVerifyServer& from);

  inline ReqVerifyServer& operator=(const ReqVerifyServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqVerifyServer& default_instance();

  void Swap(ReqVerifyServer* other);

  // implements Message ----------------------------------------------

  ReqVerifyServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqVerifyServer& from);
  void MergeFrom(const ReqVerifyServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ProtoMsgData.ServerInfo serverinfo = 1;
  inline bool has_serverinfo() const;
  inline void clear_serverinfo();
  static const int kServerinfoFieldNumber = 1;
  inline const ::ProtoMsgData::ServerInfo& serverinfo() const;
  inline ::ProtoMsgData::ServerInfo* mutable_serverinfo();
  inline ::ProtoMsgData::ServerInfo* release_serverinfo();
  inline void set_allocated_serverinfo(::ProtoMsgData::ServerInfo* serverinfo);

  // @@protoc_insertion_point(class_scope:ProtoMsgData.ReqVerifyServer)
 private:
  inline void set_has_serverinfo();
  inline void clear_has_serverinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ProtoMsgData::ServerInfo* serverinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static ReqVerifyServer* default_instance_;
};
// -------------------------------------------------------------------

class AckVerifyServer : public ::google::protobuf::Message {
 public:
  AckVerifyServer();
  virtual ~AckVerifyServer();

  AckVerifyServer(const AckVerifyServer& from);

  inline AckVerifyServer& operator=(const AckVerifyServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckVerifyServer& default_instance();

  void Swap(AckVerifyServer* other);

  // implements Message ----------------------------------------------

  AckVerifyServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckVerifyServer& from);
  void MergeFrom(const AckVerifyServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:ProtoMsgData.AckVerifyServer)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_system_2eproto();
  friend void protobuf_AssignDesc_system_2eproto();
  friend void protobuf_ShutdownFile_system_2eproto();

  void InitAsDefaultInstance();
  static AckVerifyServer* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqServerInfo

// required .ProtoMsgData.ServerType servertype = 1;
inline bool ReqServerInfo::has_servertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqServerInfo::set_has_servertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqServerInfo::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqServerInfo::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::ProtoMsgData::ServerType ReqServerInfo::servertype() const {
  return static_cast< ::ProtoMsgData::ServerType >(servertype_);
}
inline void ReqServerInfo::set_servertype(::ProtoMsgData::ServerType value) {
  assert(::ProtoMsgData::ServerType_IsValid(value));
  set_has_servertype();
  servertype_ = value;
}

// -------------------------------------------------------------------

// ServerInfo

// optional .ProtoMsgData.ServerType servertype = 1;
inline bool ServerInfo::has_servertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_servertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_servertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_servertype() {
  servertype_ = 0;
  clear_has_servertype();
}
inline ::ProtoMsgData::ServerType ServerInfo::servertype() const {
  return static_cast< ::ProtoMsgData::ServerType >(servertype_);
}
inline void ServerInfo::set_servertype(::ProtoMsgData::ServerType value) {
  assert(::ProtoMsgData::ServerType_IsValid(value));
  set_has_servertype();
  servertype_ = value;
}

// optional uint32 id = 2;
inline bool ServerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ServerInfo::id() const {
  return id_;
}
inline void ServerInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string ip = 3;
inline bool ServerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerInfo::ip() const {
  return *ip_;
}
inline void ServerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ServerInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 4;
inline bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ServerInfo::port() const {
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional .ProtoMsgData.ServerStatus status = 5;
inline bool ServerInfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfo::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::ProtoMsgData::ServerStatus ServerInfo::status() const {
  return static_cast< ::ProtoMsgData::ServerStatus >(status_);
}
inline void ServerInfo::set_status(::ProtoMsgData::ServerStatus value) {
  assert(::ProtoMsgData::ServerStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// AckUpdateServerInfo

// optional .ProtoMsgData.ServerInfo serverinfo = 1;
inline bool AckUpdateServerInfo::has_serverinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateServerInfo::set_has_serverinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateServerInfo::clear_has_serverinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateServerInfo::clear_serverinfo() {
  if (serverinfo_ != NULL) serverinfo_->::ProtoMsgData::ServerInfo::Clear();
  clear_has_serverinfo();
}
inline const ::ProtoMsgData::ServerInfo& AckUpdateServerInfo::serverinfo() const {
  return serverinfo_ != NULL ? *serverinfo_ : *default_instance_->serverinfo_;
}
inline ::ProtoMsgData::ServerInfo* AckUpdateServerInfo::mutable_serverinfo() {
  set_has_serverinfo();
  if (serverinfo_ == NULL) serverinfo_ = new ::ProtoMsgData::ServerInfo;
  return serverinfo_;
}
inline ::ProtoMsgData::ServerInfo* AckUpdateServerInfo::release_serverinfo() {
  clear_has_serverinfo();
  ::ProtoMsgData::ServerInfo* temp = serverinfo_;
  serverinfo_ = NULL;
  return temp;
}
inline void AckUpdateServerInfo::set_allocated_serverinfo(::ProtoMsgData::ServerInfo* serverinfo) {
  delete serverinfo_;
  serverinfo_ = serverinfo;
  if (serverinfo) {
    set_has_serverinfo();
  } else {
    clear_has_serverinfo();
  }
}

// -------------------------------------------------------------------

// AckRespServerInfo

// optional uint32 id = 1;
inline bool AckRespServerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckRespServerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckRespServerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckRespServerInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AckRespServerInfo::id() const {
  return id_;
}
inline void AckRespServerInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckNotifyMe

// repeated .ProtoMsgData.ServerInfo serverinfo = 1;
inline int AckNotifyMe::serverinfo_size() const {
  return serverinfo_.size();
}
inline void AckNotifyMe::clear_serverinfo() {
  serverinfo_.Clear();
}
inline const ::ProtoMsgData::ServerInfo& AckNotifyMe::serverinfo(int index) const {
  return serverinfo_.Get(index);
}
inline ::ProtoMsgData::ServerInfo* AckNotifyMe::mutable_serverinfo(int index) {
  return serverinfo_.Mutable(index);
}
inline ::ProtoMsgData::ServerInfo* AckNotifyMe::add_serverinfo() {
  return serverinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMsgData::ServerInfo >&
AckNotifyMe::serverinfo() const {
  return serverinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMsgData::ServerInfo >*
AckNotifyMe::mutable_serverinfo() {
  return &serverinfo_;
}

// -------------------------------------------------------------------

// ReqHeartBeat

// -------------------------------------------------------------------

// AckHeartBeat

// -------------------------------------------------------------------

// ReqVerifyServer

// optional .ProtoMsgData.ServerInfo serverinfo = 1;
inline bool ReqVerifyServer::has_serverinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqVerifyServer::set_has_serverinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqVerifyServer::clear_has_serverinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqVerifyServer::clear_serverinfo() {
  if (serverinfo_ != NULL) serverinfo_->::ProtoMsgData::ServerInfo::Clear();
  clear_has_serverinfo();
}
inline const ::ProtoMsgData::ServerInfo& ReqVerifyServer::serverinfo() const {
  return serverinfo_ != NULL ? *serverinfo_ : *default_instance_->serverinfo_;
}
inline ::ProtoMsgData::ServerInfo* ReqVerifyServer::mutable_serverinfo() {
  set_has_serverinfo();
  if (serverinfo_ == NULL) serverinfo_ = new ::ProtoMsgData::ServerInfo;
  return serverinfo_;
}
inline ::ProtoMsgData::ServerInfo* ReqVerifyServer::release_serverinfo() {
  clear_has_serverinfo();
  ::ProtoMsgData::ServerInfo* temp = serverinfo_;
  serverinfo_ = NULL;
  return temp;
}
inline void ReqVerifyServer::set_allocated_serverinfo(::ProtoMsgData::ServerInfo* serverinfo) {
  delete serverinfo_;
  serverinfo_ = serverinfo;
  if (serverinfo) {
    set_has_serverinfo();
  } else {
    clear_has_serverinfo();
  }
}

// -------------------------------------------------------------------

// AckVerifyServer

// optional bool ret = 1;
inline bool AckVerifyServer::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckVerifyServer::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckVerifyServer::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckVerifyServer::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool AckVerifyServer::ret() const {
  return ret_;
}
inline void AckVerifyServer::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMsgData

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsgData::ServerType>() {
  return ::ProtoMsgData::ServerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoMsgData::ServerStatus>() {
  return ::ProtoMsgData::ServerStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2eproto__INCLUDED
